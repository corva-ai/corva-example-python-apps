comma = ,
srcs_comma_sep = src,tests
srcs = $(subst $(comma), ,$(srcs_comma_sep))
unit_test_path = tests/test_unit.py
e2e_test_path = tests/test_e2e.py
manifest_name = manifest.json
package_name = package.zip

## help: Show this help.
.PHONY: help
help: Makefile
	@sed -n 's/^##\s//p' $<

## install: Install all requirements.
.PHONY: install
install:
	@pip install -U -r requirements.txt
	@pip install -U -r requirements-test.txt
	@npm i --prefix ./ @corva/local-testing-framework@3.1.5

## test: Run tests and measure code coverage.
.PHONY: test
test:
	@coverage run -m --branch			 \
 	--source=$(srcs_comma_sep) 			 \
	--omit=$(e2e_test_path)				 \
	pytest $(unit_test_path)

## test_e2e: Run e2e tests using LTF.
.PHONY: test_e2e
test_e2e:
	@PROVIDER=corva pytest $(e2e_test_path)

## testcov: Run tests and display code coverage in the browser.
.PHONY: testcov
testcov: test
	@coverage html --precision=2 --fail-under=100
	@x-www-browser htmlcov/index.html

## lint: Run linter.
.PHONY: lint
lint:
	@flake8 --max-line-length 88 $(srcs)

## clean: Delete autogenerated files.
.PHONY: clean
clean:
	@-python3 -Bc "for p in __import__('pathlib').Path('.').rglob('*.py[co]'): p.unlink()"
	@-python3 -Bc "for p in __import__('pathlib').Path('.').rglob('__pycache__'): p.rmdir()"
	@-rm -rf .pytest_cache
	@-rm -rf htmlcov
	@-rm .coverage
	@-rm $(package_name)

## build: Build .zip package.
.PHONY: build
build: PROVIDER ?=
build: clean
	@sed							 \
	-e 's|{PROVIDER}|$(PROVIDER)|g'  \
	$(manifest_name)				 \
	> $(manifest_name).new
	@zip -r9q - src/ requirements.txt $(manifest_name).new >$(package_name)
	@printf "@ $(manifest_name).new\n@=$(manifest_name)\n" \
	| zipnote -w $(package_name)
	@rm $(manifest_name).new
